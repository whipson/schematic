[{"path":"https://whipson.github.io/schematic/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 schematic authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://whipson.github.io/schematic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hipson. Author, maintainer.","code":""},{"path":"https://whipson.github.io/schematic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hipson W (2025). schematic: User Facing Schema Validation Data Frames. R package version 0.0.0.9000, https://whipson.github.io/schematic/.","code":"@Manual{,   title = {schematic: User Facing Schema Validation for Data Frames},   author = {Will Hipson},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://whipson.github.io/schematic/}, }"},{"path":"https://whipson.github.io/schematic/index.html","id":"schematic","dir":"","previous_headings":"","what":"User Facing Schema Validation for Data Frames","title":"User Facing Schema Validation for Data Frames","text":"schematic R package makes easy validate data.frame schema‚Äîchecking column types, nullability, . ‚Äôs designed user-facing applications mind, providing clear expressive error messages help users understand fix data issues. Key features schematic include: ‚úÖ Declarative schema definitions using tidyselect syntax üí¨ User-friendly error messages designed use Shiny apps APIs üìã Comprehensive reporting schema violations, just first Use schematic want flexible expressive schema validation, especially contexts informative feedback matters‚Äîlike Shiny app, plumber endpoint, tool consumes user-submitted data (e.g., .csv uploads). Use schema() create Schema. Names tidyselect expressions left tilde (LHS) correspond column names expressions right (RHS) predicate functions return TRUE FALSE. check_schema() returns informative error including names columns failed schema reason failed. can also supply argument names schema() customize output message.","code":"remotes::install_github(\"https://github.com/whipson/schematic\") library(schematic)  my_schema <- schema(   ints ~ is.integer,   pos_int ~ is_positive_integer,   starts_with(\"num\") ~ is.numeric,   c(fct1, another_fct) ~ is.factor,   times ~ function(x) inherits(x, \"POSIXct\"),   c(some_import_col) ~ is.numeric ) # Test data.frame with some errors sprinkled in my_df <- data.frame(   ints = 1L:5L,   pos_int = 1L:5L,   num1 = rnorm(5),   num2 = rpois(1, 5),   fct1 = letters[1:5],   another_fct = letters[6:10],   times = \"2025-04-09\" )  check_schema(   my_df,   my_schema ) Error in `check_schema()`: ! Schematic Error: - Column `some_import_col` missing from data - Columns `fct1` and `another_fct` failed check `is.factor` - Column `times` failed check `function(x) inherits(x, \"POSIXct\")` my_schema <- schema(   `is a whole number` = my_int ~ is.integer )  my_df <- data.frame(   my_int = c(-1, 2, 0.4) )  check_schema(my_df, my_schema) Error in `check_schema()`: ! Schematic Error: - Column `my_int` failed check `is a whole number`"},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a data.frame against a schema ‚Äî check_schema","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"Validate data.frame schema","code":""},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"","code":"check_schema(data, schema)"},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"data data.frame check schema Schema object created `schema()`","code":""},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"invisible validation passes, otherwise stops error","code":""},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector is a positive integer ‚Äî is_positive_integer","title":"Check if a vector is a positive integer ‚Äî is_positive_integer","text":"Check vector positive integer","code":""},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector is a positive integer ‚Äî is_positive_integer","text":"","code":"is_positive_integer(x)"},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector is a positive integer ‚Äî is_positive_integer","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector is a positive integer ‚Äî is_positive_integer","text":"TRUE elements positive integers (NA ignored)","code":""},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector is text-based (character or factor) ‚Äî is_text","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"Check vector text-based (character factor)","code":""},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"","code":"is_text(x)"},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"TRUE vector either character factor","code":""},{"path":"https://whipson.github.io/schematic/reference/nullable.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow NA in a predicate ‚Äî nullable","title":"Allow NA in a predicate ‚Äî nullable","text":"Allow NA predicate","code":""},{"path":"https://whipson.github.io/schematic/reference/nullable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow NA in a predicate ‚Äî nullable","text":"","code":"nullable(pred)"},{"path":"https://whipson.github.io/schematic/reference/nullable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow NA in a predicate ‚Äî nullable","text":"pred predicate function","code":""},{"path":"https://whipson.github.io/schematic/reference/nullable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow NA in a predicate ‚Äî nullable","text":"new predicate allows NAs","code":""},{"path":"https://whipson.github.io/schematic/reference/print.Schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for Schema ‚Äî print.Schema","title":"Print method for Schema ‚Äî print.Schema","text":"Print method Schema","code":""},{"path":"https://whipson.github.io/schematic/reference/print.Schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for Schema ‚Äî print.Schema","text":"","code":"# S3 method for class 'Schema' print(x, ...)"},{"path":"https://whipson.github.io/schematic/reference/print.Schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for Schema ‚Äî print.Schema","text":"x Object class Schema ... arguments passed `print()`","code":""},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a schema object ‚Äî schema","title":"Create a schema object ‚Äî schema","text":"Create schema object","code":""},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a schema object ‚Äî schema","text":"","code":"schema(...)"},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a schema object ‚Äî schema","text":"... Formulae form tidyselect_expr ~ predicate","code":""},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a schema object ‚Äî schema","text":"Schema object","code":""}]
