[{"path":"https://whipson.github.io/schematic/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 schematic authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://whipson.github.io/schematic/articles/getting-started.html","id":"create-a-schema","dir":"Articles","previous_headings":"","what":"Create a schema","title":"Getting Started","text":"schema set rules columns data.frame. rules usually type data contents. rule consists two parts: Selector - column(s) apply rule Predicate - function must return single TRUE FALSE indicating pass fail check declare schema using schema(). Note need provide data point, schema can easily reused. Note schematic several predicate functions built address common validations. rule follows format selector ~ predicate. Provide column names using tidyselect syntax tilde can callable function.","code":"my_schema <- schema(   id ~ is_incrementing,   id ~ is_all_distinct,   c(name, sex) ~ is.character,   c(id, age) ~ is_whole_number,   education ~ is.factor,   sex ~ function(x) all(x %in% c(\"M\", \"F\")),   starts_with(\"q_\") ~ is.logical,   final_score ~ is.numeric )"},{"path":"https://whipson.github.io/schematic/articles/getting-started.html","id":"check-data-against-schema","dir":"Articles","previous_headings":"","what":"Check data against schema","title":"Getting Started","text":"schema created, can apply data. applies schema checks reports failures error message. distinguishes schematic data validation packages holistic error messaging, informing user failures.","code":"check_schema(   data = survey_data,   schema = my_schema ) #> Error in `check_schema()`: #> ! Schematic Error: #> - Columns `education` and `final_score` missing from data #> - Column `id` failed check `is_incrementing` #> - Column `age` failed check `is_whole_number` #> - Column `sex` failed check `function(x) all(x %in% c(\"M\", \"F\"))`"},{"path":"https://whipson.github.io/schematic/articles/getting-started.html","id":"customizing-the-message","dir":"Articles","previous_headings":"","what":"Customizing the message","title":"Getting Started","text":"default error message helpful developers, need communicate schema mismatch non-technical person ‚Äôll trouble understanding errors. can customize output rule inputting rule named argument. Let‚Äôs fix previous example make messages understandable. Now message easier non-technical person understand exposed users Shiny app plumber endpoint.","code":"my_helpful_schema <- schema(   \"values are increasing\" = id ~ is_incrementing,   \"values are all distinct\" = id ~ is_all_distinct,   \"is a string\" = c(name, sex) ~ is.character,   \"is a whole number (no decimals)\" = c(id, age) ~ is_whole_number,   \"has only entries 'F' or 'M'\" = sex ~ function(x) all(x %in% c(\"M\", \"F\")),   \"includes only TRUE or FALSE\" = starts_with(\"q_\") ~ is.logical,   \"is a number\" = final_score ~ is.numeric )  check_schema(   data = survey_data,   schema = my_helpful_schema ) #> Error in `check_schema()`: #> ! Schematic Error: #> - Column `final_score` missing from data #> - Column `id` failed check `values are increasing` #> - Column `age` failed check `is a whole number (no decimals)` #> - Column `sex` failed check `has only entries 'F' or 'M'`"},{"path":"https://whipson.github.io/schematic/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hipson. Author, maintainer.","code":""},{"path":"https://whipson.github.io/schematic/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hipson W (2025). schematic: Tidy Schema Validation Data Frames. R package version 0.0.0.9000, https://whipson.github.io/schematic/, https://github.com/whipson/schematic.","code":"@Manual{,   title = {schematic: Tidy Schema Validation for Data Frames},   author = {Will Hipson},   year = {2025},   note = {R package version 0.0.0.9000, https://whipson.github.io/schematic/},   url = {https://github.com/whipson/schematic}, }"},{"path":"https://whipson.github.io/schematic/index.html","id":"schematic","dir":"","previous_headings":"","what":"Tidy Schema Validation for Data Frames","title":"Tidy Schema Validation for Data Frames","text":"schematic R package makes easy validate data.frame schema. ‚Äôs designed provide clear expressive error messages help users understand fix data issues. Key features schematic include: ‚úÖ Declarative schema definitions using tidyselect syntax üí¨ User-friendly error messages designed use Shiny apps APIs üìã Comprehensive reporting schema violations, just first ü™∂ Lightweight dependency-conscious‚Äîminimal overhead, easy integrate Use schematic want flexible expressive schema validation, especially contexts informative feedback matters‚Äîlike Shiny app, plumber endpoint, tool consumes user-submitted data (e.g., .csv uploads). Use schema() create Schema. Names tidyselect expressions left tilde (LHS) correspond column names expressions right (RHS) predicate functions return TRUE FALSE. check_schema() returns informative error including names columns failed schema reason failed. can also supply argument names schema() customize output message. particularly helpful want present user informative message Shiny app.","code":"remotes::install_github(\"https://github.com/whipson/schematic\") library(schematic)  # Test data.frame with some errors sprinkled in my_df <- data.frame(   ints = 1L:5L,   num1 = rnorm(5),   num2 = rpois(1, 5),   fct1 = letters[1:5],   another_fct = letters[6:10],   times = \"2025-04-09\" )  my_schema <- schema(   ints ~ is.integer,   starts_with(\"num\") ~ is.numeric,   c(fct1, another_fct) ~ is.factor,   times ~ function(x) inherits(x, \"POSIXct\"),   c(some_import_col) ~ is.numeric ) check_schema(   my_df,   my_schema ) Error in `check_schema()`: ! Schematic Error: - Column `some_import_col` missing from data - Columns `fct1` and `another_fct` failed check `is.factor` - Column `times` failed check `function(x) inherits(x, \"POSIXct\")` my_schema <- schema(   `is a whole number` = my_int ~ is.integer )  my_df <- data.frame(   my_int = c(-1, 2, 0.4) )  check_schema(my_df, my_schema) Error in `check_schema()`: ! Schematic Error: - Column `my_int` failed check `is a whole number`"},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a data.frame against a schema ‚Äî check_schema","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"Validate data.frame schema","code":""},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"","code":"check_schema(data, schema)"},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"data data.frame check schema Schema object created `schema()`","code":""},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"invisible validation passes, otherwise stops error","code":""},{"path":"https://whipson.github.io/schematic/reference/check_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a data.frame against a schema ‚Äî check_schema","text":"","code":"my_schema <- schema(   mpg ~ is.numeric )  check_schema(mtcars, my_schema)"},{"path":"https://whipson.github.io/schematic/reference/is_all_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if all values in a vector are distinct ‚Äî is_all_distinct","title":"Check if all values in a vector are distinct ‚Äî is_all_distinct","text":"Check values vector distinct","code":""},{"path":"https://whipson.github.io/schematic/reference/is_all_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if all values in a vector are distinct ‚Äî is_all_distinct","text":"","code":"is_all_distinct(x)"},{"path":"https://whipson.github.io/schematic/reference/is_all_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if all values in a vector are distinct ‚Äî is_all_distinct","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_all_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if all values in a vector are distinct ‚Äî is_all_distinct","text":"TRUE vector unique values","code":""},{"path":"https://whipson.github.io/schematic/reference/is_all_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if all values in a vector are distinct ‚Äî is_all_distinct","text":"","code":"is_all_distinct(c(1:5)) # TRUE #> [1] TRUE is_all_distinct(c(1, 1, 2)) # FALSE #> [1] FALSE"},{"path":"https://whipson.github.io/schematic/reference/is_incrementing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the vector is sorted numerically or alphanumerically ‚Äî is_incrementing","title":"Check if the vector is sorted numerically or alphanumerically ‚Äî is_incrementing","text":"`NA`s ignored vector `NA`s fail unless whole vector `NA`.","code":""},{"path":"https://whipson.github.io/schematic/reference/is_incrementing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the vector is sorted numerically or alphanumerically ‚Äî is_incrementing","text":"","code":"is_incrementing(x)"},{"path":"https://whipson.github.io/schematic/reference/is_incrementing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the vector is sorted numerically or alphanumerically ‚Äî is_incrementing","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_incrementing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the vector is sorted numerically or alphanumerically ‚Äî is_incrementing","text":"TRUE vector sorted","code":""},{"path":"https://whipson.github.io/schematic/reference/is_incrementing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the vector is sorted numerically or alphanumerically ‚Äî is_incrementing","text":"","code":"is_incrementing(1:5) # TRUE #> [1] TRUE is_incrementing(letters[1:5]) # TRUE #> [1] TRUE is_incrementing(c(4, 3, 0)) # FALSE #> [1] FALSE"},{"path":"https://whipson.github.io/schematic/reference/is_non_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if all values are not NA ‚Äî is_non_null","title":"Check if all values are not NA ‚Äî is_non_null","text":"Check values NA","code":""},{"path":"https://whipson.github.io/schematic/reference/is_non_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if all values are not NA ‚Äî is_non_null","text":"","code":"is_non_null(x)"},{"path":"https://whipson.github.io/schematic/reference/is_non_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if all values are not NA ‚Äî is_non_null","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_non_null.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if all values are not NA ‚Äî is_non_null","text":"TRUE vector NA values","code":""},{"path":"https://whipson.github.io/schematic/reference/is_non_null.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if all values are not NA ‚Äî is_non_null","text":"","code":"is_non_null(1:5) # TRUE #> [1] TRUE is_non_null(c(1, NA, 3)) # FALSE #> [1] FALSE"},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector has all positive integers ‚Äî is_positive_integer","title":"Check if a vector has all positive integers ‚Äî is_positive_integer","text":"positive integer whole number greater 0.","code":""},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector has all positive integers ‚Äî is_positive_integer","text":"","code":"is_positive_integer(x)"},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector has all positive integers ‚Äî is_positive_integer","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector has all positive integers ‚Äî is_positive_integer","text":"TRUE elements positive integers (NA ignored)","code":""},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a vector has all positive integers ‚Äî is_positive_integer","text":"check requires `.integer(x)` true. want flexible check allows numbers type `numeric` still want integers, use `is_whole_number()`. `NA`s ignored long `NA_integer`.","code":""},{"path":"https://whipson.github.io/schematic/reference/is_positive_integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector has all positive integers ‚Äî is_positive_integer","text":"","code":"is_positive_integer(c(1L, 2L, 4L)) # TRUE #> [1] TRUE is_positive_integer(2.4) # FALSE #> [1] FALSE is_positive_integer(-3) # FALSE #> [1] FALSE"},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector is text-based (character or factor) ‚Äî is_text","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"`NA`s ignored long `NA_character_`.","code":""},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"","code":"is_text(x)"},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"TRUE vector either character factor","code":""},{"path":"https://whipson.github.io/schematic/reference/is_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector is text-based (character or factor) ‚Äî is_text","text":"","code":"is_text(letters[1:4]) # TRUE #> [1] TRUE is_text(as.factor(letters[1:4])) # TRUE #> [1] TRUE is_text(1) # FALSE #> [1] FALSE"},{"path":"https://whipson.github.io/schematic/reference/is_whole_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector has all whole numbers ‚Äî is_whole_number","title":"Check if a vector has all whole numbers ‚Äî is_whole_number","text":"Similar `is_positive_integer()` without constraint underlying data type actually integer. Useful numbers stored `numeric` want check whole.","code":""},{"path":"https://whipson.github.io/schematic/reference/is_whole_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector has all whole numbers ‚Äî is_whole_number","text":"","code":"is_whole_number(x)"},{"path":"https://whipson.github.io/schematic/reference/is_whole_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector has all whole numbers ‚Äî is_whole_number","text":"x vector","code":""},{"path":"https://whipson.github.io/schematic/reference/is_whole_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector has all whole numbers ‚Äî is_whole_number","text":"TRUE elements whole numbers (NA ignored)","code":""},{"path":"https://whipson.github.io/schematic/reference/is_whole_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a vector has all whole numbers ‚Äî is_whole_number","text":"`NA`s ignored.","code":""},{"path":"https://whipson.github.io/schematic/reference/is_whole_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector has all whole numbers ‚Äî is_whole_number","text":"","code":"is_whole_number(c(2.0, 4.0)) # TRUE #> [1] TRUE is_whole_number(c(-1.4)) # FALSE #> [1] FALSE"},{"path":"https://whipson.github.io/schematic/reference/mod_infinitable.html","id":null,"dir":"Reference","previous_headings":"","what":"Ignore infinite values in a predicate ‚Äî mod_infinitable","title":"Ignore infinite values in a predicate ‚Äî mod_infinitable","text":"modifies predicate function ignore Inf.","code":""},{"path":"https://whipson.github.io/schematic/reference/mod_infinitable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ignore infinite values in a predicate ‚Äî mod_infinitable","text":"","code":"mod_infinitable(pred)"},{"path":"https://whipson.github.io/schematic/reference/mod_infinitable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ignore infinite values in a predicate ‚Äî mod_infinitable","text":"pred predicate function","code":""},{"path":"https://whipson.github.io/schematic/reference/mod_infinitable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ignore infinite values in a predicate ‚Äî mod_infinitable","text":"new predicate ignores infinites","code":""},{"path":"https://whipson.github.io/schematic/reference/mod_infinitable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ignore infinite values in a predicate ‚Äî mod_infinitable","text":"","code":"# The `is_incrementing` predicate will fail here x <- c(1, Inf, 3) is_incrementing(x) # FALSE #> [1] FALSE  is_incrementing_inf <- mod_infinitable(is_incrementing) is_incrementing_inf(x) # TRUE #> [1] TRUE"},{"path":"https://whipson.github.io/schematic/reference/mod_nullable.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow NA in a predicate ‚Äî mod_nullable","title":"Allow NA in a predicate ‚Äî mod_nullable","text":"modifies predicate function ignore NAs.","code":""},{"path":"https://whipson.github.io/schematic/reference/mod_nullable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow NA in a predicate ‚Äî mod_nullable","text":"","code":"mod_nullable(pred)"},{"path":"https://whipson.github.io/schematic/reference/mod_nullable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow NA in a predicate ‚Äî mod_nullable","text":"pred predicate function","code":""},{"path":"https://whipson.github.io/schematic/reference/mod_nullable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow NA in a predicate ‚Äî mod_nullable","text":"new predicate allows NAs","code":""},{"path":"https://whipson.github.io/schematic/reference/mod_nullable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow NA in a predicate ‚Äî mod_nullable","text":"","code":"# The `is_incrementing` predicate will fail if there are NAs x <- c(1, NA, 3) is_incrementing(x) # FALSE #> [1] FALSE  is_incrementing_null <- mod_nullable(is_incrementing) is_incrementing_null(x) # TRUE #> [1] TRUE"},{"path":"https://whipson.github.io/schematic/reference/print.Schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for Schema ‚Äî print.Schema","title":"Print method for Schema ‚Äî print.Schema","text":"Print method Schema","code":""},{"path":"https://whipson.github.io/schematic/reference/print.Schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for Schema ‚Äî print.Schema","text":"","code":"# S3 method for class 'Schema' print(x, ...)"},{"path":"https://whipson.github.io/schematic/reference/print.Schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for Schema ‚Äî print.Schema","text":"x Object class Schema ... arguments passed `print()`","code":""},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a schema object ‚Äî schema","title":"Create a schema object ‚Äî schema","text":"Create schema object","code":""},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a schema object ‚Äî schema","text":"","code":"schema(...)"},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a schema object ‚Äî schema","text":"... Formulae form tidyselect_expr ~ predicate","code":""},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a schema object ‚Äî schema","text":"Schema object","code":""},{"path":"https://whipson.github.io/schematic/reference/schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a schema object ‚Äî schema","text":"","code":"# Simple schema with one declared column my_schema <- schema(   mpg ~ is.double )  # Multiple columns my_schema <- schema(   Sepal.Length ~ is.numeric,   Species ~ is.factor )  # Use tidyselect syntax and anonymous functions my_schema <- schema(   starts_with(\"Sepal\") ~ is.numeric,   c(Petal.Length, Petal.Width) ~ function(x) all(x > 0) )  # Use named arguments to customize error messages my_schema <- schema(   `Must be a positive number` = cyl ~ function(x) all(x > 0) )"}]
